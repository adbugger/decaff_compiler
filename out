; ModuleID = 'Decaf Compiler'
source_filename = "Decaf Compiler"

@arr = global [10 x i32] zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"%d %d \00"
@1 = private unnamed_addr constant [4 x i8] c"%d \00"
@2 = private unnamed_addr constant [3 x i8] c"\5Cn\00"

define void @main() {
entry:
  %index1 = alloca i32
  %index = alloca i32
  store i32 0, i32* %index
  %0 = load i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 0)
  store i32 0, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 0)
  %1 = load i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 1)
  store i32 1, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 1)
  %2 = load i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 0)
  %3 = load i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 1)
  %4 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i32 0, i32 0), i32 %2, i32 %3)
  store i32 2, i32* %index1
  br label %header_condition

header_condition:                                 ; preds = %loop_body, %entry
  %index2 = phi i32 [ 2, %entry ], [ %next_val, %loop_body ]
  %loop_conditional_start = icmp slt i32 %index2, 10
  br i1 %loop_conditional_start, label %loop_body, label %loop_after

loop_body:                                        ; preds = %header_condition
  %5 = load i32, i32* %index1
  %arr_index = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %5
  %6 = load i32, i32* %arr_index
  %7 = load i32, i32* %index1
  %subtmp = sub i32 %7, 1
  %arr_index3 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %subtmp
  %8 = load i32, i32* %arr_index3
  %9 = load i32, i32* %index1
  %subtmp4 = sub i32 %9, 2
  %arr_index5 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %subtmp4
  %10 = load i32, i32* %arr_index5
  %addtmp = add i32 %8, %10
  store i32 %addtmp, i32* %arr_index
  %11 = load i32, i32* %index1
  %arr_index6 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %11
  %12 = load i32, i32* %arr_index6
  %13 = call i32 bitcast (i32 (i8*, i32, i32)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %12)
  %next_val = add i32 %index2, 1
  store i32 %next_val, i32* %index1
  br label %header_condition

loop_after:                                       ; preds = %header_condition
  %14 = call i32 bitcast (i32 (i8*, i32, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, i32, i32)
